# 리스트(list) 자료형
# 여러개의 값을 변수 1개에 저장
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[1, 1, 1, 1, 1] # 같은 문자 반복 가능
["Hello", "World", "Python"] # ""을 사용하며 문자형도 가능
[1, "Hello", 2, "WOW"] # 숫자형과 문자형 혼용 가능
[1, 2, ["Hello", "World"]] # 리스트 안에 리스트를 추가 가능
[] # 빈 형태의 리스트도 가능

li_1 = [1, 2, 3]
# print(li_1[0])
# print(li_1[1])
# print(li_1[2])
# print(li_1[-1])
# print(li_1[0] + li_1[1])

li_2 = [1, 2, 3, [4, 5, 6]]
print(li_2[3][0])
print(li_2[2:3])
print(li_2[1:])
print(li_2[:2])
print(li_2[3][0:2])
print(li_2[0:1]) # 아래의 코드와 같지 않다. 왜냐면 리스트 형태의 값을 불러옴
print(li_2[0]) # 정수형 값을 불러옴

li_3 = [1, 2, 3, 4, 5]
# 출력 결과가 [2, 3]이 되도록 만드시오.

print(li_3[1:3])
# print(li_3[100])
print(len(li_3)) # 범위를 확인하기 위해 len()함수를 쓴다.
# [10, 2, 3, 4, 5] 
li_3[0] = 10 # 값의 수정(재할당)이 가능하다.
print(li_3)

# 슬라이싱은 리스트 형태의 데이터를 가져오고, 
# 인덱싱은 정수 형태의 데이터를 가져온다

# append(원소)
# 리스트의 마지막에 원소를 추가

li_4 = [1, 2, 3]
li_4.append(4)
li_4.append("문자")
li_4.append([1,2,3])
print(li_4)

# insert(인덱스, 원소)
# 인덱스 위치에 원소 삽입!
li = [1, 2, 3]
li.insert(1, 10)
print(li) # [1, 10 , 2, 3]

# remove(값)
# 리스트에서 함수에 입력된 값과 같은 값을 찾아 삭제함
# 먼저 나오는 값만 삭제(중복된 값이 있을경우 먼저 있는 값을 삭제함)
# 리스트에 없는 값을 삭제하려고 하면 에러가 남
li = [1, 2, 3]
li.remove(2)
print(li) # [1, 3]

# pop(인덱스)
# 리스트의 인덱스 위치의 요소를 꺼낸다.
# 인덱스를 함수에 전달하지 않으면 제일 마지막 요소를 꺼낸다.
li = [1, 2, 3, 4]
a = li.pop()
print(li) # [1, 2, 3]
print(a) # 4
b = li.pop(1)
print(li) # [1, 3]
print(b) # 2

# index(값)
# 리스트에서 값을 찾아 그 값의 인덱스를 돌려준다(반환한다).
# 값이 리스트에 없으면 에러가 남.
# (배열에서 값의 위치를 찾아주는 함수)
# li[2] ---> 인덱싱(인덱스로 값에 접근)
# li.index(값) ---> 인덱스 알아내기.
li = [1, 2, 3]
idx = li.index(2) # 1
print(idx)

# sort()
# 리스트의 요소를 정렬한다.
li = [5, 3, 1, 4, 2]
li.sort()
print(li) # [1, 2, 3, 4, 5] (오름차순 형태로 정렬)
li.sort(reverse = True) 
print(li) # [5, 4, 3, 2, 1] (내림차순 형태로 정렬)

# reverse()
# 리스트의 순서를 뒤집는 함수
# 정렬 아님!! (순서만 뒤집는다.)
li = [5, 1, 3, 4, 2]
li.reverse()
print(li) # [2, 4, 3, 1, 5]

# count(값)
# 리스트 안에서 해당 값이 몇 개 있는지 세고 갯수를 돌려준다.
# 해당 값이 있는 지 찾는 함수이고, 맞는 값이 없으면 에러가 나는게 아닌 0으로 표기
li = [1, 2, 3, 2]
cnt = li.count(2)
print(cnt) # 2 

# + 연산자
# 리스트를 연결한다. (리스트 내의 값을 더하지 않고, 리스트와 리스트를 연결)
# extend(리스트) 함수와 같다.
li_1 = [1, 2, 3]
li_2 = [4, 5, 6]
print(li_1 + li_2) # [1, 2, 3, 4, 5, 6]
li_1.extend(li_2)

# * 연산자
# 리스트를 반복한다. (리스트 내의 값을 곱하지 않고, 리스트를 N번 반복한다.)
li = [1, 2, 3]
print(li * 3) # [1, 2, 3, 1, 2, 3, 1, 2, 3]
